# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['redirect_jupyter_stderr', 'ReverseTB', 'reverse_tb']

# %% ../nbs/00_core.ipynb 4
from contextlib import contextmanager

from fastcore.all import *
from typing import Optional
from IPython.core.magic import register_cell_magic
from IPython.core import ultratb

# %% ../nbs/00_core.ipynb 5
@contextmanager
def redirect_jupyter_stderr():
    ip = get_ipython()
    showtraceback = ip.showtraceback
    
    try:
        ip.showtraceback = noop
        yield 
    except Exception as e:
        pass
    finally:
        ip.showtraceback = showtraceback


# %% ../nbs/00_core.ipynb 6
class ReverseTB(ultratb.VerboseTB):
    def text(self, etype, value, tb, tb_offset: Optional[int] = None, context=5):
        """Return formatted traceback."""
        tb_list = self.structured_traceback(etype, value, tb,
                                            tb_offset, context)
        tb_list.reverse()
        tb_list = [x.replace('most recent call last', 'last call first') for x in tb_list if '[... skipping hidden 1 frame]' not in x]
        tb_list = tb_list[-1:]+tb_list[:-1]
        return self.stb2text(tb_list)

@register_cell_magic
def reverse_tb(line, cell):
    """A cell magic that reverses only the frames of the traceback of an error."""
    # Execute the cell and get the result object
    with redirect_jupyter_stderr():
        result = get_ipython().run_cell(cell)
    # If the execution was not successful, get the error
    if not result.success:
        e = result.error_in_exec
        etype = result.error_before_exec or result.error_in_exec
        tb = result.error_in_exec.__traceback__
        # Get the formatted traceback
        vtb = ReverseTB(color_scheme='Neutral')
        tb_text = vtb.text(type(etype), e, tb)
        print(tb_text)
